
Step 1: Setup Vault and deploy a HA Vault Cluster within Kubernetes.  This demo used a codelab for Google Kubernetes Engine (GKE)
: https://codelabs.developers.google.com/codelabs/vault-on-gke/index.html?index=..%2F..cloud#0.  The demo can also be setup
using HashiCorp Vaults learning lab: https://learn.hashicorp.com/vault/getting-started/install

Step 2: This demo will create 4 sample vault policies using the following code.

1. admin:

$ vault policy write admin -<<EOF
#HashiCorp guidance states the admin is focused on configuring and 
#maintaining the health of the clusters and providing support.
#They must be able to mount and manage auth back-ends (auth methods
#perform authentication and assign identity and a set of policies)
#mount and manage secret back-ends, create and manage ACL policies
#and read system heath checks:
path "auth/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# List, create, update, and delete auth backends
path "sys/auth/*"
{
  capabilities = ["create", "read", "update", "delete", "sudo"]
}

# To list policies - Step 3
path "sys/policy"
{
  capabilities = ["read"]
}

# Create and manage ACL policies broadly across Vault
path "sys/policy/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# List, create, update, and delete key/value secrets
path "secret/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# Manage and manage secret backends broadly across Vault.
path "sys/mounts/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# Read health checks
path "sys/health"
{
  capabilities = ["read", "sudo"]
}

path "sys/capabilities"
{
  capabilities = ["create", "update"]
}

path "sys/capabilities-self"
{
  capabilities = ["create", "update"]
}
EOF

2. audit user

Before we create an audit user policy, we need to enable auditing.

$ vault audit enable file file_path=/tmp/my-file.txt

Listing audit devices will confirm they are present

$ vault audit list -detailed

$ GKE also shows the audit log: https://console.cloud.google.com/logs/viewer?interval=NO_LIMIT&project=vault-gke-cluster-walkthrough&organizationId=0&minLogLevel=0&expandAll=false&timestamp=2020-04-02T18:54:33.465000000Z&customFacets=&limitCustomFacetWidth=true&advancedFilter=logName%3D%22projects%2Fvault-gke-cluster-walkthrough%2Flogs%2Fcloudaudit.googleapis.com%252Factivity%22%0Aresource.type%3D%22k8s_cluster%22%0Aresource.labels.cluster_name%3D%22vault%22%0Aresource.labels.location%3D%22us-east1%22%0AprotoPayload.request.metadata.name%3D%22vault-0%22%0AprotoPayload.methodName:%22pods.%22&scrollTimestamp=2020-04-02T14:16:15.626137000Z

$ vault policy write audit-user -<<EOF
#Auditors should have read access to the audit logs.
#Within an Entrprise, auditors should not have greater than read access
#to paths used by the admin or other users.  This is to reduce
#any risks of making changes by mistake.
path "/tmp/*"
{
  capabilities = ["read"]
}

path "auth/*"
{
  capabilities = ["read"]
}
path "sys/auth/*"
{
  capabilities = ["read"]
}

# To list policies - Step 3
path "sys/policy"
{
  capabilities = ["read"]
}
path "sys/policy/*"
{
  capabilities = ["read"]
}
path "secret/*"
{
  capabilities = ["read"]
}
path "sys/mounts/*"
{
  capabilities = ["read"]
}
path "sys/health"
{
  capabilities = ["read"]
}
path "sys/capabilities"
{
  capabilities = ["read"]
}
path "sys/capabilities-self"
{
  capabilities = ["read"]
}
EOF

3. Business User With Access to a Business Specific Path.

$ vault policy write bus-group -<<EOF
#this policy will allow the user to access the bus path "secret/data/team/bus"
path "secret/data/team/bus"
{ capabilities = ["create", "read", "update", "delete"]
}
EOF

4. Engineering User With Access to an Engineering Specific Path.

$ vault policy write eng-group -<<EOF
#this policy will allow the user to access the eng path "secret/data/team/eng"
path "secret/data/team/eng"
{ capabilities = ["create", "read", "update", "delete"]
}
EOF


Step 3: confirm the policies are there and view their contents.

$ vault policy list

$ vault policy read admin
$ vault policy read audit-user
$ vault policy read bus-group
$ vault policy read eng-group 

Step 4: Authenticate with the policies and demonstraite the level of access for each of the policies with use cases

Usting HTTP APIs guidance: https://learn.hashicorp.com/vault/getting-started/apis

1. Access Rights to the Audit Log:

We will setup tokens and authenticate.  Then we'll review the token capabilities along the path to the Audit Log.  
Ideally, only the Audit user or Admin should have the capabilities to access the Path.

$ vault token create -policy=admin
#create a token and assign it to the admin policy

$ vault token create -policy=audit-user
#create a token and assign it to the auidt policy

$ vault token create -policy=bus-group
#create a token and assign it to the admin policy

$ vault token create -policy=eng-group
#create a token and assign it to the admin policy

$ vault login <add token id>
#login with the token and authenticate to vault

$ vault token capabilities /tmp/my-file.txt
#for the local token to confirm the current token you are logged in as.

$ vault token capabilities <token number> /tmp/my-file.txt
#check each token.  All should be deny excpet Audit.

2. Key Vault store use case:

$ vault secrets enable -path=secret/ kv-v2
#add secret path to the secrets list

$ vault login <add token id>
#login with the token and authenticate to vault

$ vault kv put secret/creds password="my-long-password"
#while authenticated with the admin policy try to write data to the secret path

$ vault kv get secret/creds
#view the secret

Now, try creating a secret with the other accounts.  You should not have access to do this.

NOTE: If a token is created by another auth method, they do not have a parent token. However, any tokens created 
by the auth/token/create API have a parent token, namely the token used to make that request. 
By maintaining this parent-child relationship, Vault models token trees.  Depending on the order of the token creation,
revoking a token may be required or look up the existing token.

$ vault token revoke <token_id>

$ vault token lookup


NOTE: when logging with the Tokens, while using the Google 'Using HashiCorp Vault on GKE' tutorial:
https://codelabs.developers.google.com/codelabs/vault-on-gke/index.html?index=..%2F..cloud#0
you will get a similar warning: markjpaulsen@cloudshell:~ (newprojectfor-testing)$ vault login s.AQeur5hRGYTZrM3qCgSQOsSe
WARNING! The VAULT_TOKEN environment variable is set! This takes precedence
over the value set by this command. To use the value set by this command,
unset the VAULT_TOKEN environment variable or set it to the token displayed
below.

For the Policies to work properly, you'll need to first run the following command to set the VAULT_TOKEN to the Token you created.
export VAULT_TOKEN = <the token created which is linked to the 4 policies created above>

Then run through the step 4 use cases successfully.  

One last note: to create new tokens you'll need to reset the VAULT_TOKEN back to the root token with this command -
export VAULT_TOKEN="$(gsutil cat "gs://${GOOGLE_CLOUD_PROJECT}-vault-storage/root-token.enc" | \
  base64 --decode | \
  gcloud kms decrypt \
    --location us-east1 \
    --keyring vault \
    --key vault-init \
    --ciphertext-file - \
    --plaintext-file -)"
